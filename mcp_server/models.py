# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:56:28+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, confloat, conint, constr


class AccountId(RootModel[constr(pattern=r'^[0-9]{12}$')]):
    root: constr(pattern=r'^[0-9]{12}$')


class AccountList(RootModel[List[AccountId]]):
    root: List[AccountId] = Field(..., max_length=1536, min_length=1)


class AmiNameString(
    RootModel[
        constr(
            pattern=r'^[-_A-Za-z0-9{][-_A-Za-z0-9\s:{}\.]+[-_A-Za-z0-9}]$',
            min_length=1,
            max_length=127,
        )
    ]
):
    root: constr(
        pattern=r'^[-_A-Za-z0-9{][-_A-Za-z0-9\s:{}\.]+[-_A-Za-z0-9}]$',
        min_length=1,
        max_length=127,
    )


class Arn(RootModel[str]):
    root: str


class Boolean(RootModel[bool]):
    root: bool


class BuildType(Enum):
    USER_INITIATED = 'USER_INITIATED'
    SCHEDULED = 'SCHEDULED'
    IMPORT = 'IMPORT'


class CallRateLimitExceededException(RootModel[Any]):
    root: Any


class ClientException(RootModel[Any]):
    root: Any


class ClientToken(RootModel[constr(min_length=1, max_length=36)]):
    root: constr(min_length=1, max_length=36)


class ComponentBuildVersionArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$'
    )


class ComponentData(RootModel[str]):
    root: str


class ComponentFormat(Enum):
    SHELL = 'SHELL'


class ComponentParameterDescription(
    RootModel[constr(pattern=r'[^\x00]+', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'[^\x00]+', min_length=1, max_length=1024)


class ComponentParameterName(
    RootModel[constr(pattern=r'[^\x00]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[^\x00]+', min_length=1, max_length=256)


class ComponentParameterType(
    RootModel[
        constr(
            pattern=r'^String|Integer|Boolean|StringList$', min_length=1, max_length=20
        )
    ]
):
    root: constr(
        pattern=r'^String|Integer|Boolean|StringList$', min_length=1, max_length=20
    )


class ComponentParameterValue(RootModel[constr(pattern=r'[^\x00]*', min_length=0)]):
    root: constr(pattern=r'[^\x00]*', min_length=0)


class ComponentParameterValueList(RootModel[List[ComponentParameterValue]]):
    root: List[ComponentParameterValue]


class ComponentStatus(Enum):
    DEPRECATED = 'DEPRECATED'


class ComponentType(Enum):
    BUILD = 'BUILD'
    TEST = 'TEST'


class ComponentVersionArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
    )


class ComponentVersionArnOrBuildVersionArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/(?:(?:([0-9]+|x)\.([0-9]+|x)\.([0-9]+|x))|(?:[0-9]+\.[0-9]+\.[0-9]+/[0-9]+))$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/(?:(?:([0-9]+|x)\.([0-9]+|x)\.([0-9]+|x))|(?:[0-9]+\.[0-9]+\.[0-9]+/[0-9]+))$'
    )


class ContainerRecipeArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
    )


class ContainerRepositoryService(Enum):
    ECR = 'ECR'


class ContainerType(Enum):
    DOCKER = 'DOCKER'


class DateTime(RootModel[str]):
    root: str


class DateTimeTimestamp(RootModel[datetime]):
    root: datetime


class DeleteComponentRequest(BaseModel):
    pass


class DeleteContainerRecipeRequest(BaseModel):
    pass


class DeleteDistributionConfigurationRequest(BaseModel):
    pass


class DeleteImagePipelineRequest(BaseModel):
    pass


class DeleteImageRecipeRequest(BaseModel):
    pass


class DeleteImageRequest(BaseModel):
    pass


class DeleteInfrastructureConfigurationRequest(BaseModel):
    pass


class DiskImageFormat(Enum):
    VMDK = 'VMDK'
    RAW = 'RAW'
    VHD = 'VHD'


class DistributionConfigurationArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$'
    )


class DistributionTimeoutMinutes(RootModel[conint(ge=30, le=720)]):
    root: conint(ge=30, le=720)


class DockerFileTemplate(RootModel[str]):
    root: str


class EbsIopsInteger(RootModel[conint(ge=100, le=64000)]):
    root: conint(ge=100, le=64000)


class EbsVolumeSizeInteger(RootModel[conint(ge=1, le=16000)]):
    root: conint(ge=1, le=16000)


class EbsVolumeThroughput(RootModel[conint(ge=125, le=1000)]):
    root: conint(ge=125, le=1000)


class EbsVolumeType(Enum):
    standard = 'standard'
    io1 = 'io1'
    io2 = 'io2'
    gp2 = 'gp2'
    gp3 = 'gp3'
    sc1 = 'sc1'
    st1 = 'st1'


class EmptyString(RootModel[constr(min_length=0, max_length=0)]):
    root: constr(min_length=0, max_length=0)


class FilterName(RootModel[constr(pattern=r'^[a-zA-Z]{1,1024}$')]):
    root: constr(pattern=r'^[a-zA-Z]{1,1024}$')


class FilterValue(RootModel[constr(pattern=r'^[0-9a-zA-Z./_ :-]{1,1024}$')]):
    root: constr(pattern=r'^[0-9a-zA-Z./_ :-]{1,1024}$')


class FilterValues(RootModel[List[FilterValue]]):
    root: List[FilterValue] = Field(..., max_length=10, min_length=1)


class ForbiddenException(RootModel[Any]):
    root: Any


class GetComponentPolicyRequest(BaseModel):
    pass


class GetComponentRequest(BaseModel):
    pass


class GetContainerRecipePolicyRequest(BaseModel):
    pass


class GetContainerRecipeRequest(BaseModel):
    pass


class GetDistributionConfigurationRequest(BaseModel):
    pass


class GetImagePipelineRequest(BaseModel):
    pass


class GetImagePolicyRequest(BaseModel):
    pass


class GetImageRecipePolicyRequest(BaseModel):
    pass


class GetImageRecipeRequest(BaseModel):
    pass


class GetImageRequest(BaseModel):
    pass


class GetInfrastructureConfigurationRequest(BaseModel):
    pass


class GetWorkflowExecutionRequest(BaseModel):
    pass


class GetWorkflowStepExecutionRequest(BaseModel):
    pass


class HttpPutResponseHopLimit(RootModel[conint(ge=1, le=64)]):
    root: conint(ge=1, le=64)


class HttpTokens(RootModel[constr(pattern=r'optional|required')]):
    root: constr(pattern=r'optional|required')


class IdempotentParameterMismatchException(RootModel[Any]):
    root: Any


class ImageBuildMessage(RootModel[constr(min_length=0, max_length=500)]):
    root: constr(min_length=0, max_length=500)


class ImageBuildVersionArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$'
    )


class ImageBuilderArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):(?:image-recipe|container-recipe|infrastructure-configuration|distribution-configuration|component|image|image-pipeline|workflow\/(?:build|test|distribution))/[a-z0-9-_]+(?:/(?:(?:x|[0-9]+)\.(?:x|[0-9]+)\.(?:x|[0-9]+))(?:/[0-9]+)?)?$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):(?:image-recipe|container-recipe|infrastructure-configuration|distribution-configuration|component|image|image-pipeline|workflow\/(?:build|test|distribution))/[a-z0-9-_]+(?:/(?:(?:x|[0-9]+)\.(?:x|[0-9]+)\.(?:x|[0-9]+))(?:/[0-9]+)?)?$'
    )


class ImagePipelineArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$'
    )


class ImageRecipeArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
    )


class ImageScanFindingsFilterValues(RootModel[List[FilterValue]]):
    root: List[FilterValue] = Field(..., max_length=1, min_length=1)


class ImageScanStatus(Enum):
    PENDING = 'PENDING'
    SCANNING = 'SCANNING'
    COLLECTING = 'COLLECTING'
    COMPLETED = 'COMPLETED'
    ABANDONED = 'ABANDONED'
    FAILED = 'FAILED'
    TIMED_OUT = 'TIMED_OUT'


class ImageSource(Enum):
    AMAZON_MANAGED = 'AMAZON_MANAGED'
    AWS_MARKETPLACE = 'AWS_MARKETPLACE'
    IMPORTED = 'IMPORTED'
    CUSTOM = 'CUSTOM'


class ImageStatus(Enum):
    PENDING = 'PENDING'
    CREATING = 'CREATING'
    BUILDING = 'BUILDING'
    TESTING = 'TESTING'
    DISTRIBUTING = 'DISTRIBUTING'
    INTEGRATING = 'INTEGRATING'
    AVAILABLE = 'AVAILABLE'
    CANCELLED = 'CANCELLED'
    FAILED = 'FAILED'
    DEPRECATED = 'DEPRECATED'
    DELETED = 'DELETED'


class ImageTestsTimeoutMinutes(RootModel[conint(ge=60, le=1440)]):
    root: conint(ge=60, le=1440)


class ImageType(Enum):
    AMI = 'AMI'
    DOCKER = 'DOCKER'


class ImageVersionArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
    )


class ImageVersionArnOrBuildVersionArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/(?:(?:([0-9]+|x)\.([0-9]+|x)\.([0-9]+|x))|(?:[0-9]+\.[0-9]+\.[0-9]+/[0-9]+))$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/(?:(?:([0-9]+|x)\.([0-9]+|x)\.([0-9]+|x))|(?:[0-9]+\.[0-9]+\.[0-9]+/[0-9]+))$'
    )


class InfrastructureConfigurationArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$'
    )


class InlineComponentData(
    RootModel[constr(pattern=r'[^\x00]+', min_length=1, max_length=16000)]
):
    root: constr(pattern=r'[^\x00]+', min_length=1, max_length=16000)


class InlineDockerFileTemplate(
    RootModel[constr(pattern=r'[^\x00]+', min_length=1, max_length=16000)]
):
    root: constr(pattern=r'[^\x00]+', min_length=1, max_length=16000)


class InstanceMetadataOptions(BaseModel):
    httpPutResponseHopLimit: Optional[HttpPutResponseHopLimit] = None
    httpTokens: Optional[HttpTokens] = None


class InstanceProfileNameType(
    RootModel[constr(pattern=r'^[\w+=,.@-]+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[\w+=,.@-]+$', min_length=1, max_length=256)


class InstanceType(RootModel[str]):
    root: str


class InstanceTypeList(RootModel[List[InstanceType]]):
    root: List[InstanceType]


class InvalidPaginationTokenException(RootModel[Any]):
    root: Any


class InvalidParameterCombinationException(RootModel[Any]):
    root: Any


class InvalidParameterException(RootModel[Any]):
    root: Any


class InvalidParameterValueException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class InvalidVersionNumberException(RootModel[Any]):
    root: Any


class LaunchTemplateId(RootModel[constr(pattern=r'^lt-[a-z0-9-_]{17}$')]):
    root: constr(pattern=r'^lt-[a-z0-9-_]{17}$')


class LicenseConfigurationArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:license-manager:[^:]+:[0-9]{12}:license-configuration:lic-[a-z0-9-_]{32}$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:license-manager:[^:]+:[0-9]{12}:license-configuration:lic-[a-z0-9-_]{32}$'
    )


class LicenseConfigurationArnList(RootModel[List[LicenseConfigurationArn]]):
    root: List[LicenseConfigurationArn] = Field(..., max_length=50, min_length=1)


class ListTagsForResourceRequest(BaseModel):
    pass


class MaxParallelLaunches(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class NonEmptyString(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class NonEmptyStringList(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString] = Field(..., min_length=1)


class NonNegativeDouble(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class NullableBoolean(RootModel[bool]):
    root: bool


class OrganizationArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:organizations::[0-9]{12}:organization/o-[a-z0-9]{10,32}$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:organizations::[0-9]{12}:organization/o-[a-z0-9]{10,32}$'
    )


class OrganizationArnList(RootModel[List[OrganizationArn]]):
    root: List[OrganizationArn] = Field(..., max_length=25, min_length=1)


class OrganizationalUnitArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:]*:organizations::[0-9]{12}:ou/o-[a-z0-9]{10,32}/ou-[0-9a-z]{4,32}-[0-9a-z]{8,32}'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:]*:organizations::[0-9]{12}:ou/o-[a-z0-9]{10,32}/ou-[0-9a-z]{4,32}-[0-9a-z]{8,32}'
    )


class OrganizationalUnitArnList(RootModel[List[OrganizationalUnitArn]]):
    root: List[OrganizationalUnitArn] = Field(..., max_length=25, min_length=1)


class OsVersion(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class OsVersionList(RootModel[List[OsVersion]]):
    root: List[OsVersion] = Field(..., max_length=25, min_length=1)


class Ownership(Enum):
    Self = 'Self'
    Shared = 'Shared'
    Amazon = 'Amazon'
    ThirdParty = 'ThirdParty'


class PackageArchitecture(RootModel[str]):
    root: str


class PackageEpoch(RootModel[int]):
    root: int


class PaginationToken(RootModel[constr(min_length=1, max_length=65535)]):
    root: constr(min_length=1, max_length=65535)


class PipelineExecutionStartCondition(Enum):
    EXPRESSION_MATCH_ONLY = 'EXPRESSION_MATCH_ONLY'
    EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE = (
        'EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE'
    )


class PipelineStatus(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class Platform(Enum):
    Windows = 'Windows'
    Linux = 'Linux'


class PutComponentPolicyResponse(BaseModel):
    componentArn: Optional[ComponentBuildVersionArn] = None
    requestId: Optional[NonEmptyString] = None


class PutContainerRecipePolicyResponse(BaseModel):
    containerRecipeArn: Optional[ContainerRecipeArn] = None
    requestId: Optional[NonEmptyString] = None


class PutImagePolicyResponse(BaseModel):
    imageArn: Optional[ImageBuildVersionArn] = None
    requestId: Optional[NonEmptyString] = None


class PutImageRecipePolicyResponse(BaseModel):
    imageRecipeArn: Optional[ImageRecipeArn] = None
    requestId: Optional[NonEmptyString] = None


class RegionList(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString]


class RemediationRecommendation(BaseModel):
    text: Optional[NonEmptyString] = None
    url: Optional[NonEmptyString] = None


class ResourceAlreadyExistsException(RootModel[Any]):
    root: Any


class ResourceDependencyException(RootModel[Any]):
    root: Any


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceName(
    RootModel[constr(pattern=r'^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$')]
):
    root: constr(pattern=r'^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$')


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourcePolicyDocument(RootModel[constr(min_length=1, max_length=30000)]):
    root: constr(min_length=1, max_length=30000)


class RestrictedInteger(RootModel[conint(ge=1, le=25)]):
    root: conint(ge=1, le=25)


class S3ExportConfiguration(BaseModel):
    diskImageFormat: DiskImageFormat
    roleName: NonEmptyString
    s3Bucket: NonEmptyString
    s3Prefix: Optional[NonEmptyString] = None


class S3Logs(BaseModel):
    s3BucketName: Optional[NonEmptyString] = None
    s3KeyPrefix: Optional[NonEmptyString] = None


class SecurityGroupIds(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString]


class ServiceException(RootModel[Any]):
    root: Any


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class SeverityCountNumber(RootModel[int]):
    root: int


class SeverityCounts(BaseModel):
    all: Optional[SeverityCountNumber] = None
    critical: Optional[SeverityCountNumber] = None
    high: Optional[SeverityCountNumber] = None
    medium: Optional[SeverityCountNumber] = None


class SnsTopicArn(
    RootModel[
        constr(pattern=r'^arn:aws[^:]*:sns:[^:]+:[0-9]{12}:[a-zA-Z0-9-_]{1,256}$')
    ]
):
    root: constr(pattern=r'^arn:aws[^:]*:sns:[^:]+:[0-9]{12}:[a-zA-Z0-9-_]{1,256}$')


class SourceLayerHash(RootModel[str]):
    root: str


class StartImagePipelineExecutionRequest(BaseModel):
    clientToken: ClientToken
    imagePipelineArn: ImagePipelineArn


class StartImagePipelineExecutionResponse(BaseModel):
    clientToken: Optional[ClientToken] = None
    imageBuildVersionArn: Optional[ImageBuildVersionArn] = None
    requestId: Optional[NonEmptyString] = None


class StringList(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString]


class SystemsManagerAgent(BaseModel):
    uninstallAfterBuild: Optional[NullableBoolean] = None


class TagKey(
    RootModel[
        constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class TargetContainerRepository(BaseModel):
    repositoryName: NonEmptyString
    service: ContainerRepositoryService


class TargetResourceCount(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class Timezone(
    RootModel[
        constr(
            pattern=r'[a-zA-Z0-9]{2,}(?:\/[a-zA-z0-9-_+]+)*',
            min_length=3,
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9]{2,}(?:\/[a-zA-z0-9-_+]+)*', min_length=3, max_length=100
    )


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateDistributionConfigurationResponse(BaseModel):
    clientToken: Optional[ClientToken] = None
    distributionConfigurationArn: Optional[DistributionConfigurationArn] = None
    requestId: Optional[NonEmptyString] = None


class UpdateImagePipelineResponse(BaseModel):
    clientToken: Optional[ClientToken] = None
    imagePipelineArn: Optional[ImagePipelineArn] = None
    requestId: Optional[NonEmptyString] = None


class UpdateInfrastructureConfigurationResponse(BaseModel):
    clientToken: Optional[ClientToken] = None
    infrastructureConfigurationArn: Optional[InfrastructureConfigurationArn] = None
    requestId: Optional[NonEmptyString] = None


class Uri(RootModel[str]):
    root: str


class UserDataOverride(
    RootModel[
        constr(
            pattern=r'^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$',
            min_length=1,
            max_length=21847,
        )
    ]
):
    root: constr(
        pattern=r'^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$',
        min_length=1,
        max_length=21847,
    )


class VersionNumber(RootModel[constr(pattern=r'^[0-9]+\.[0-9]+\.[0-9]+$')]):
    root: constr(pattern=r'^[0-9]+\.[0-9]+\.[0-9]+$')


class VulnerabilityId(RootModel[str]):
    root: str


class VulnerabilityIdAggregation(BaseModel):
    severityCounts: Optional[SeverityCounts] = None
    vulnerabilityId: Optional[NonEmptyString] = None


class VulnerabilityIdList(RootModel[List[VulnerabilityId]]):
    root: List[VulnerabilityId]


class VulnerablePackage(BaseModel):
    arch: Optional[PackageArchitecture] = None
    epoch: Optional[PackageEpoch] = None
    filePath: Optional[NonEmptyString] = None
    fixedInVersion: Optional[NonEmptyString] = None
    name: Optional[NonEmptyString] = None
    packageManager: Optional[NonEmptyString] = None
    release: Optional[NonEmptyString] = None
    remediation: Optional[NonEmptyString] = None
    sourceLayerHash: Optional[SourceLayerHash] = None
    version: Optional[NonEmptyString] = None


class VulnerablePackageList(RootModel[List[VulnerablePackage]]):
    root: List[VulnerablePackage]


class WorkflowBuildVersionArn(
    RootModel[
        constr(
            pattern=r'^arn:aws(?:-[a-z]+)*:imagebuilder:[a-z]{2,}(?:-[a-z]+)+-[0-9]+:(?:[0-9]{12}|aws):workflow/(build|test|distribution)/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$',
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(?:-[a-z]+)*:imagebuilder:[a-z]{2,}(?:-[a-z]+)+-[0-9]+:(?:[0-9]{12}|aws):workflow/(build|test|distribution)/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$',
        max_length=1024,
    )


class WorkflowExecutionId(
    RootModel[
        constr(
            pattern=r'^wf-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
        )
    ]
):
    root: constr(
        pattern=r'^wf-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
    )


class WorkflowExecutionMessage(RootModel[constr(min_length=0, max_length=500)]):
    root: constr(min_length=0, max_length=500)


class WorkflowExecutionStatus(Enum):
    PENDING = 'PENDING'
    SKIPPED = 'SKIPPED'
    RUNNING = 'RUNNING'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    ROLLBACK_IN_PROGRESS = 'ROLLBACK_IN_PROGRESS'
    ROLLBACK_COMPLETED = 'ROLLBACK_COMPLETED'


class WorkflowStepAction(RootModel[constr(pattern=r'^[A-Za-z][A-Za-z0-9-_]{1,99}$')]):
    root: constr(pattern=r'^[A-Za-z][A-Za-z0-9-_]{1,99}$')


class WorkflowStepCount(RootModel[int]):
    root: int


class WorkflowStepDescription(RootModel[constr(min_length=0, max_length=500)]):
    root: constr(min_length=0, max_length=500)


class WorkflowStepExecutionId(
    RootModel[
        constr(
            pattern=r'^step-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
        )
    ]
):
    root: constr(
        pattern=r'^step-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
    )


class WorkflowStepExecutionRollbackStatus(Enum):
    RUNNING = 'RUNNING'
    COMPLETED = 'COMPLETED'
    SKIPPED = 'SKIPPED'
    FAILED = 'FAILED'


class WorkflowStepExecutionStatus(Enum):
    PENDING = 'PENDING'
    SKIPPED = 'SKIPPED'
    RUNNING = 'RUNNING'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class WorkflowStepInputs(RootModel[str]):
    root: str


class WorkflowStepMessage(RootModel[constr(min_length=0, max_length=500)]):
    root: constr(min_length=0, max_length=500)


class WorkflowStepName(RootModel[constr(pattern=r'^[A-Za-z][A-Za-z0-9-_]{1,99}$')]):
    root: constr(pattern=r'^[A-Za-z][A-Za-z0-9-_]{1,99}$')


class WorkflowStepOutputs(RootModel[str]):
    root: str


class WorkflowStepTimeoutSecondsInteger(RootModel[conint(ge=0, le=43200)]):
    root: conint(ge=0, le=43200)


class WorkflowType(Enum):
    BUILD = 'BUILD'
    TEST = 'TEST'
    DISTRIBUTION = 'DISTRIBUTION'


class CancelImageCreationPutRequest(BaseModel):
    clientToken: constr(min_length=1, max_length=36) = Field(
        ...,
        description='Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.',
    )
    imageBuildVersionArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the image that you want to cancel creation for.',
    )


class CreateComponentPutRequest(BaseModel):
    changeDescription: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The change description of the component. Describes what change has been made in this version, or what makes this version different from other versions of this component.',
    )
    clientToken: constr(min_length=1, max_length=36) = Field(
        ..., description='The idempotency token of the component.'
    )
    data: Optional[constr(pattern=r'[^\x00]+', min_length=1, max_length=16000)] = Field(
        None,
        description='Component <code>data</code> contains inline YAML document content for the component. Alternatively, you can specify the <code>uri</code> of a YAML document file stored in Amazon S3. However, you cannot specify both properties.',
    )
    description: Optional[constr(min_length=1, max_length=1024)] = Field(
        None, description='Describes the contents of the component.'
    )
    kmsKeyId: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The ID of the KMS key that is used to encrypt this component.',
    )
    name: constr(pattern=r'^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$') = (
        Field(..., description='The name of the component.')
    )
    platform: Platform = Field(
        ..., description='The operating system platform of the component.'
    )
    semanticVersion: constr(pattern=r'^[0-9]+\.[0-9]+\.[0-9]+$') = Field(
        ...,
        description='<p>The semantic version of the component. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>',
    )
    supportedOsVersions: Optional[List[OsVersion]] = Field(
        None,
        description='The operating system (OS) version supported by the component. If the OS information is available, a prefix match is performed against the base image OS version during image recipe creation.',
        max_length=25,
        min_length=1,
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags that apply to the component.'
    )
    uri: Optional[str] = Field(
        None,
        description='<p>The <code>uri</code> of a YAML component document file. This must be an S3 URL (<code>s3://bucket/key</code>), and the requester must have permission to access the S3 bucket it points to. If you use Amazon S3, you can specify component content up to your service quota.</p> <p>Alternatively, you can specify the YAML document inline, using the component <code>data</code> property. You cannot specify both properties.</p>',
    )


class PlatformOverride(Enum):
    Windows = 'Windows'
    Linux = 'Linux'


class TargetRepository(BaseModel):
    repositoryName: Optional[NonEmptyString] = None
    service: Optional[ContainerRepositoryService] = None


class ImageTestsConfiguration(BaseModel):
    imageTestsEnabled: Optional[NullableBoolean] = None
    timeoutMinutes: Optional[ImageTestsTimeoutMinutes] = None


class Schedule(BaseModel):
    pipelineExecutionStartCondition: Optional[PipelineExecutionStartCondition] = None
    scheduleExpression: Optional[NonEmptyString] = None
    timezone: Optional[Timezone] = None


class Status(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class AdditionalInstanceConfiguration(BaseModel):
    systemsManagerAgent: Optional[SystemsManagerAgent] = None
    userDataOverride: Optional[UserDataOverride] = None


class Logging(BaseModel):
    s3Logs: Optional[S3Logs] = None


class CreateInfrastructureConfigurationPutRequest(BaseModel):
    clientToken: constr(min_length=1, max_length=36) = Field(
        ..., description='The idempotency token used to make this request idempotent.'
    )
    description: Optional[constr(min_length=1, max_length=1024)] = Field(
        None, description='The description of the infrastructure configuration.'
    )
    instanceMetadataOptions: Optional[InstanceMetadataOptions] = Field(
        None,
        description='The instance metadata options that apply to the HTTP requests that pipeline builds use to launch EC2 build and test instances. For more information about instance metadata options, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 User Guide</i> </i> for Linux instances, or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 Windows Guide</i> </i> for Windows instances.',
    )
    instanceProfileName: constr(
        pattern=r'^[\w+=,.@-]+$', min_length=1, max_length=256
    ) = Field(
        ...,
        description='The instance profile to associate with the instance used to customize your Amazon EC2 AMI.',
    )
    instanceTypes: Optional[List[InstanceType]] = Field(
        None,
        description='The instance types of the infrastructure configuration. You can specify one or more instance types to use for this build. The service will pick one of these instance types based on availability.',
    )
    keyPair: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The key pair of the infrastructure configuration. You can use this to log on to and debug the instance used to create your image.',
    )
    logging: Optional[Logging] = Field(
        None,
        description='Logging configuration defines where Image Builder uploads your logs.',
    )
    name: constr(pattern=r'^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$') = (
        Field(..., description='The name of the infrastructure configuration.')
    )
    resourceTags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags attached to the resource created by Image Builder.'
    )
    securityGroupIds: Optional[List[NonEmptyString]] = Field(
        None,
        description='The security group IDs to associate with the instance used to customize your Amazon EC2 AMI.',
    )
    snsTopicArn: Optional[
        constr(pattern=r'^arn:aws[^:]*:sns:[^:]+:[0-9]{12}:[a-zA-Z0-9-_]{1,256}$')
    ] = Field(
        None,
        description='<p>The Amazon Resource Name (ARN) for the SNS topic to which we send image build event notifications.</p> <note> <p>EC2 Image Builder is unable to send notifications to SNS topics that are encrypted using keys from other accounts. The key that is used to encrypt the SNS topic must reside in the account that the Image Builder service runs under.</p> </note>',
    )
    subnetId: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The subnet ID in which to place the instance used to customize your Amazon EC2 AMI.',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags of the infrastructure configuration.'
    )
    terminateInstanceOnFailure: Optional[bool] = Field(
        None,
        description='The terminate instance on failure setting of the infrastructure configuration. Set to false if you want Image Builder to retain the instance used to configure your AMI if the build or test phase of your workflow fails.',
    )


class Format(Enum):
    SHELL = 'SHELL'


class Type(Enum):
    BUILD = 'BUILD'
    TEST = 'TEST'


class ImportComponentPutRequest(BaseModel):
    changeDescription: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The change description of the component. This description indicates the change that has been made in this version, or what makes this version different from other versions of this component.',
    )
    clientToken: constr(min_length=1, max_length=36) = Field(
        ..., description='The idempotency token of the component.'
    )
    data: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The data of the component. Used to specify the data inline. Either <code>data</code> or <code>uri</code> can be used to specify the data within the component.',
    )
    description: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The description of the component. Describes the contents of the component.',
    )
    format: Format = Field(
        ...,
        description='The format of the resource that you want to import as a component.',
    )
    kmsKeyId: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The ID of the KMS key that should be used to encrypt this component.',
    )
    name: constr(pattern=r'^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$') = (
        Field(..., description='The name of the component.')
    )
    platform: Platform = Field(..., description='The platform of the component.')
    semanticVersion: constr(pattern=r'^[0-9]+\.[0-9]+\.[0-9]+$') = Field(
        ...,
        description='<p>The semantic version of the component. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p> </note>',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags of the component.'
    )
    type: Type = Field(
        ...,
        description='The type of the component denotes whether the component is used to build the image, or only to test it.',
    )
    uri: Optional[str] = Field(
        None,
        description='The uri of the component. Must be an Amazon S3 URL and the requester must have permission to access the Amazon S3 bucket. If you use Amazon S3, you can specify component content up to your service quota. Either <code>data</code> or <code>uri</code> can be used to specify the data within the component.',
    )


class ImportVmImagePutRequest(BaseModel):
    clientToken: constr(min_length=1, max_length=36) = Field(
        ...,
        description='Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.',
    )
    description: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The description for the base image that is created by the import process.',
    )
    name: constr(min_length=1, max_length=1024) = Field(
        ...,
        description='The name of the base image that is created by the import process.',
    )
    osVersion: Optional[constr(min_length=1)] = Field(
        None, description='The operating system version for the imported VM.'
    )
    platform: Platform = Field(
        ..., description='The operating system platform for the imported VM.'
    )
    semanticVersion: constr(pattern=r'^[0-9]+\.[0-9]+\.[0-9]+$') = Field(
        ...,
        description='<p>The semantic version to attach to the base image that was created during the import process. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='Tags that are attached to the import resources.'
    )
    vmImportTaskId: constr(min_length=1, max_length=1024) = Field(
        ...,
        description='The <code>importTaskId</code> (API) or <code>ImportTaskId</code> (CLI) from the Amazon EC2 VM import process. Image Builder retrieves information from the import process to pull in the AMI that is created from the VM source as the base image for your recipe.',
    )


class ListComponentBuildVersionsPostRequest(BaseModel):
    componentVersionArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
    ) = Field(
        ...,
        description='The component version Amazon Resource Name (ARN) whose versions you want to list.',
    )
    maxResults: Optional[conint(ge=1, le=25)] = Field(
        None, description='The maximum items to return in a request.'
    )
    nextToken: Optional[constr(min_length=1, max_length=65535)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )


class Owner(Enum):
    Self = 'Self'
    Shared = 'Shared'
    Amazon = 'Amazon'
    ThirdParty = 'ThirdParty'


class ListImagePackagesPostRequest(BaseModel):
    imageBuildVersionArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$'
    ) = Field(
        ...,
        description='Filter results for the ListImagePackages request by the Image Build Version ARN',
    )
    maxResults: Optional[conint(ge=1, le=25)] = Field(
        None, description='The maximum items to return in a request.'
    )
    nextToken: Optional[constr(min_length=1, max_length=65535)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )


class Filter(BaseModel):
    name: Optional[FilterName] = None
    values: Optional[FilterValues] = None


class ListImageScanFindingAggregationsPostRequest(BaseModel):
    filter: Optional[Filter] = Field(
        None,
        description='A filter name and value pair that is used to return a more specific list of results from a list operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.',
    )
    nextToken: Optional[constr(min_length=1, max_length=65535)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )


class ListWorkflowExecutionsPostRequest(BaseModel):
    imageBuildVersionArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$'
    ) = Field(
        ...,
        description='List all workflow runtime instances for the specified image build version resource ARN.',
    )
    maxResults: Optional[conint(ge=1, le=25)] = Field(
        None, description='The maximum items to return in a request.'
    )
    nextToken: Optional[constr(min_length=1, max_length=65535)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )


class ListWorkflowStepExecutionsPostRequest(BaseModel):
    maxResults: Optional[conint(ge=1, le=25)] = Field(
        None, description='The maximum items to return in a request.'
    )
    nextToken: Optional[constr(min_length=1, max_length=65535)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )
    workflowExecutionId: constr(
        pattern=r'^wf-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
    ) = Field(
        ...,
        description='The unique identifier that Image Builder assigned to keep track of runtime details when it ran the workflow.',
    )


class PutComponentPolicyPutRequest(BaseModel):
    componentArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the component that this policy should be applied to.',
    )
    policy: constr(min_length=1, max_length=30000) = Field(
        ..., description='The policy to apply.'
    )


class PutContainerRecipePolicyPutRequest(BaseModel):
    containerRecipeArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the container recipe that this policy should be applied to.',
    )
    policy: constr(min_length=1, max_length=30000) = Field(
        ..., description='The policy to apply to the container recipe.'
    )


class PutImagePolicyPutRequest(BaseModel):
    imageArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the image that this policy should be applied to.',
    )
    policy: constr(min_length=1, max_length=30000) = Field(
        ..., description='The policy to apply.'
    )


class PutImageRecipePolicyPutRequest(BaseModel):
    imageRecipeArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the image recipe that this policy should be applied to.',
    )
    policy: constr(min_length=1, max_length=30000) = Field(
        ..., description='The policy to apply.'
    )


class StartImagePipelineExecutionPutRequest(BaseModel):
    clientToken: constr(min_length=1, max_length=36) = Field(
        ..., description='The idempotency token used to make this request idempotent.'
    )
    imagePipelineArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the image pipeline that you want to manually invoke.',
    )


class UpdateInfrastructureConfigurationPutRequest(BaseModel):
    clientToken: constr(min_length=1, max_length=36) = Field(
        ..., description='The idempotency token used to make this request idempotent.'
    )
    description: Optional[constr(min_length=1, max_length=1024)] = Field(
        None, description='The description of the infrastructure configuration.'
    )
    infrastructureConfigurationArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the infrastructure configuration that you want to update.',
    )
    instanceMetadataOptions: Optional[InstanceMetadataOptions] = Field(
        None,
        description='The instance metadata options that apply to the HTTP requests that pipeline builds use to launch EC2 build and test instances. For more information about instance metadata options, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 User Guide</i> </i> for Linux instances, or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 Windows Guide</i> </i> for Windows instances.',
    )
    instanceProfileName: constr(
        pattern=r'^[\w+=,.@-]+$', min_length=1, max_length=256
    ) = Field(
        ...,
        description='The instance profile to associate with the instance used to customize your Amazon EC2 AMI.',
    )
    instanceTypes: Optional[List[InstanceType]] = Field(
        None,
        description='The instance types of the infrastructure configuration. You can specify one or more instance types to use for this build. The service will pick one of these instance types based on availability.',
    )
    keyPair: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The key pair of the infrastructure configuration. You can use this to log on to and debug the instance used to create your image.',
    )
    logging: Optional[Logging] = Field(
        None,
        description='Logging configuration defines where Image Builder uploads your logs.',
    )
    resourceTags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags attached to the resource created by Image Builder.'
    )
    securityGroupIds: Optional[List[NonEmptyString]] = Field(
        None,
        description='The security group IDs to associate with the instance used to customize your Amazon EC2 AMI.',
    )
    snsTopicArn: Optional[
        constr(pattern=r'^arn:aws[^:]*:sns:[^:]+:[0-9]{12}:[a-zA-Z0-9-_]{1,256}$')
    ] = Field(
        None,
        description='<p>The Amazon Resource Name (ARN) for the SNS topic to which we send image build event notifications.</p> <note> <p>EC2 Image Builder is unable to send notifications to SNS topics that are encrypted using keys from other accounts. The key that is used to encrypt the SNS topic must reside in the account that the Image Builder service runs under.</p> </note>',
    )
    subnetId: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The subnet ID to place the instance used to customize your Amazon EC2 AMI in.',
    )
    terminateInstanceOnFailure: Optional[bool] = Field(
        None,
        description='The terminate instance on failure setting of the infrastructure configuration. Set to false if you want Image Builder to retain the instance used to configure your AMI if the build or test phase of your workflow fails.',
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, TagValue] = Field(
        ..., description='The tags to apply to the resource.'
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class AccountAggregation(BaseModel):
    accountId: Optional[NonEmptyString] = None
    severityCounts: Optional[SeverityCounts] = None


class CancelImageCreationRequest(BaseModel):
    clientToken: ClientToken
    imageBuildVersionArn: ImageBuildVersionArn


class CancelImageCreationResponse(BaseModel):
    clientToken: Optional[ClientToken] = None
    imageBuildVersionArn: Optional[ImageBuildVersionArn] = None
    requestId: Optional[NonEmptyString] = None


class ComponentParameter(BaseModel):
    name: ComponentParameterName
    value: ComponentParameterValueList


class ComponentParameterDetail(BaseModel):
    defaultValue: Optional[ComponentParameterValueList] = None
    description: Optional[ComponentParameterDescription] = None
    name: ComponentParameterName
    type: ComponentParameterType


class ComponentParameterDetailList(RootModel[List[ComponentParameterDetail]]):
    root: List[ComponentParameterDetail]


class ComponentParameterList(RootModel[List[ComponentParameter]]):
    root: List[ComponentParameter] = Field(..., min_length=1)


class ComponentState(BaseModel):
    reason: Optional[NonEmptyString] = None
    status: Optional[ComponentStatus] = None


class ComponentVersion(BaseModel):
    arn: Optional[ImageBuilderArn] = None
    dateCreated: Optional[DateTime] = None
    description: Optional[NonEmptyString] = None
    name: Optional[ResourceName] = None
    owner: Optional[NonEmptyString] = None
    platform: Optional[Platform] = None
    supportedOsVersions: Optional[OsVersionList] = None
    type: Optional[ComponentType] = None
    version: Optional[VersionNumber] = None


class ComponentVersionList(RootModel[List[ComponentVersion]]):
    root: List[ComponentVersion]


class Container(BaseModel):
    imageUris: Optional[StringList] = None
    region: Optional[NonEmptyString] = None


class ContainerDistributionConfiguration(BaseModel):
    containerTags: Optional[StringList] = None
    description: Optional[NonEmptyString] = None
    targetRepository: TargetContainerRepository


class ContainerList(RootModel[List[Container]]):
    root: List[Container]


class CreateComponentResponse(BaseModel):
    clientToken: Optional[ClientToken] = None
    componentBuildVersionArn: Optional[ComponentBuildVersionArn] = None
    requestId: Optional[NonEmptyString] = None


class CreateContainerRecipeResponse(BaseModel):
    clientToken: Optional[ClientToken] = None
    containerRecipeArn: Optional[ContainerRecipeArn] = None
    requestId: Optional[NonEmptyString] = None


class CreateDistributionConfigurationResponse(BaseModel):
    clientToken: Optional[ClientToken] = None
    distributionConfigurationArn: Optional[DistributionConfigurationArn] = None
    requestId: Optional[NonEmptyString] = None


class CreateImagePipelineResponse(BaseModel):
    clientToken: Optional[ClientToken] = None
    imagePipelineArn: Optional[ImagePipelineArn] = None
    requestId: Optional[NonEmptyString] = None


class CreateImageRecipeResponse(BaseModel):
    clientToken: Optional[ClientToken] = None
    imageRecipeArn: Optional[ImageRecipeArn] = None
    requestId: Optional[NonEmptyString] = None


class CreateImageResponse(BaseModel):
    clientToken: Optional[ClientToken] = None
    imageBuildVersionArn: Optional[ImageBuildVersionArn] = None
    requestId: Optional[NonEmptyString] = None


class CreateInfrastructureConfigurationResponse(BaseModel):
    clientToken: Optional[ClientToken] = None
    infrastructureConfigurationArn: Optional[InfrastructureConfigurationArn] = None
    requestId: Optional[NonEmptyString] = None


class CvssScore(BaseModel):
    baseScore: Optional[NonNegativeDouble] = None
    scoringVector: Optional[NonEmptyString] = None
    source: Optional[NonEmptyString] = None
    version: Optional[NonEmptyString] = None


class CvssScoreAdjustment(BaseModel):
    metric: Optional[NonEmptyString] = None
    reason: Optional[NonEmptyString] = None


class CvssScoreAdjustmentList(RootModel[List[CvssScoreAdjustment]]):
    root: List[CvssScoreAdjustment]


class CvssScoreDetails(BaseModel):
    adjustments: Optional[CvssScoreAdjustmentList] = None
    cvssSource: Optional[NonEmptyString] = None
    score: Optional[NonNegativeDouble] = None
    scoreSource: Optional[NonEmptyString] = None
    scoringVector: Optional[NonEmptyString] = None
    version: Optional[NonEmptyString] = None


class CvssScoreList(RootModel[List[CvssScore]]):
    root: List[CvssScore]


class DeleteComponentResponse(BaseModel):
    componentBuildVersionArn: Optional[ComponentBuildVersionArn] = None
    requestId: Optional[NonEmptyString] = None


class DeleteContainerRecipeResponse(BaseModel):
    containerRecipeArn: Optional[ContainerRecipeArn] = None
    requestId: Optional[NonEmptyString] = None


class DeleteDistributionConfigurationResponse(BaseModel):
    distributionConfigurationArn: Optional[DistributionConfigurationArn] = None
    requestId: Optional[NonEmptyString] = None


class DeleteImagePipelineResponse(BaseModel):
    imagePipelineArn: Optional[ImagePipelineArn] = None
    requestId: Optional[NonEmptyString] = None


class DeleteImageRecipeResponse(BaseModel):
    imageRecipeArn: Optional[ImageRecipeArn] = None
    requestId: Optional[NonEmptyString] = None


class DeleteImageResponse(BaseModel):
    imageBuildVersionArn: Optional[ImageBuildVersionArn] = None
    requestId: Optional[NonEmptyString] = None


class DeleteInfrastructureConfigurationResponse(BaseModel):
    infrastructureConfigurationArn: Optional[InfrastructureConfigurationArn] = None
    requestId: Optional[NonEmptyString] = None


class EbsInstanceBlockDeviceSpecification(BaseModel):
    deleteOnTermination: Optional[NullableBoolean] = None
    encrypted: Optional[NullableBoolean] = None
    iops: Optional[EbsIopsInteger] = None
    kmsKeyId: Optional[NonEmptyString] = None
    snapshotId: Optional[NonEmptyString] = None
    throughput: Optional[EbsVolumeThroughput] = None
    volumeSize: Optional[EbsVolumeSizeInteger] = None
    volumeType: Optional[EbsVolumeType] = None


class EcrConfiguration(BaseModel):
    containerTags: Optional[StringList] = None
    repositoryName: Optional[NonEmptyString] = None


class FastLaunchLaunchTemplateSpecification(BaseModel):
    launchTemplateId: Optional[LaunchTemplateId] = None
    launchTemplateName: Optional[NonEmptyString] = None
    launchTemplateVersion: Optional[NonEmptyString] = None


class FastLaunchSnapshotConfiguration(BaseModel):
    targetResourceCount: Optional[TargetResourceCount] = None


class FilterList(RootModel[List[Filter]]):
    root: List[Filter] = Field(..., max_length=10, min_length=1)


class GetComponentPolicyResponse(BaseModel):
    policy: Optional[ResourcePolicyDocument] = None
    requestId: Optional[NonEmptyString] = None


class GetContainerRecipePolicyResponse(BaseModel):
    policy: Optional[ResourcePolicyDocument] = None
    requestId: Optional[NonEmptyString] = None


class GetImagePolicyResponse(BaseModel):
    policy: Optional[ResourcePolicyDocument] = None
    requestId: Optional[NonEmptyString] = None


class GetImageRecipePolicyResponse(BaseModel):
    policy: Optional[ResourcePolicyDocument] = None
    requestId: Optional[NonEmptyString] = None


class GetWorkflowExecutionResponse(BaseModel):
    endTime: Optional[DateTime] = None
    imageBuildVersionArn: Optional[ImageBuildVersionArn] = None
    message: Optional[WorkflowExecutionMessage] = None
    requestId: Optional[NonEmptyString] = None
    startTime: Optional[DateTime] = None
    status: Optional[WorkflowExecutionStatus] = None
    totalStepCount: Optional[WorkflowStepCount] = None
    totalStepsFailed: Optional[WorkflowStepCount] = None
    totalStepsSkipped: Optional[WorkflowStepCount] = None
    totalStepsSucceeded: Optional[WorkflowStepCount] = None
    type: Optional[WorkflowType] = None
    workflowBuildVersionArn: Optional[WorkflowBuildVersionArn] = None
    workflowExecutionId: Optional[WorkflowExecutionId] = None


class GetWorkflowStepExecutionResponse(BaseModel):
    action: Optional[WorkflowStepAction] = None
    description: Optional[WorkflowStepDescription] = None
    endTime: Optional[DateTime] = None
    imageBuildVersionArn: Optional[ImageBuildVersionArn] = None
    inputs: Optional[WorkflowStepInputs] = None
    message: Optional[WorkflowStepMessage] = None
    name: Optional[WorkflowStepName] = None
    onFailure: Optional[NonEmptyString] = None
    outputs: Optional[WorkflowStepOutputs] = None
    requestId: Optional[NonEmptyString] = None
    rollbackStatus: Optional[WorkflowStepExecutionRollbackStatus] = None
    startTime: Optional[DateTime] = None
    status: Optional[WorkflowStepExecutionStatus] = None
    stepExecutionId: Optional[WorkflowStepExecutionId] = None
    timeoutSeconds: Optional[WorkflowStepTimeoutSecondsInteger] = None
    workflowBuildVersionArn: Optional[WorkflowBuildVersionArn] = None
    workflowExecutionId: Optional[WorkflowExecutionId] = None


class ImageAggregation(BaseModel):
    imageBuildVersionArn: Optional[ImageBuildVersionArn] = None
    severityCounts: Optional[SeverityCounts] = None


class ImagePackage(BaseModel):
    packageName: Optional[NonEmptyString] = None
    packageVersion: Optional[NonEmptyString] = None


class ImagePackageList(RootModel[List[ImagePackage]]):
    root: List[ImagePackage]


class ImagePipelineAggregation(BaseModel):
    imagePipelineArn: Optional[ImagePipelineArn] = None
    severityCounts: Optional[SeverityCounts] = None


class ImageScanFindingAggregation(BaseModel):
    accountAggregation: Optional[AccountAggregation] = None
    imageAggregation: Optional[ImageAggregation] = None
    imagePipelineAggregation: Optional[ImagePipelineAggregation] = None
    vulnerabilityIdAggregation: Optional[VulnerabilityIdAggregation] = None


class ImageScanFindingAggregationsList(RootModel[List[ImageScanFindingAggregation]]):
    root: List[ImageScanFindingAggregation]


class ImageScanFindingsFilter(BaseModel):
    name: Optional[FilterName] = None
    values: Optional[ImageScanFindingsFilterValues] = None


class ImageScanFindingsFilterList(RootModel[List[ImageScanFindingsFilter]]):
    root: List[ImageScanFindingsFilter] = Field(..., max_length=1, min_length=1)


class ImageScanState(BaseModel):
    reason: Optional[NonEmptyString] = None
    status: Optional[ImageScanStatus] = None


class ImageScanningConfiguration(BaseModel):
    ecrConfiguration: Optional[EcrConfiguration] = None
    imageScanningEnabled: Optional[NullableBoolean] = None


class ImageState(BaseModel):
    reason: Optional[NonEmptyString] = None
    status: Optional[ImageStatus] = None


class ImageVersion(BaseModel):
    arn: Optional[ImageBuilderArn] = None
    buildType: Optional[BuildType] = None
    dateCreated: Optional[DateTime] = None
    imageSource: Optional[ImageSource] = None
    name: Optional[ResourceName] = None
    osVersion: Optional[OsVersion] = None
    owner: Optional[NonEmptyString] = None
    platform: Optional[Platform] = None
    type: Optional[ImageType] = None
    version: Optional[VersionNumber] = None


class ImageVersionList(RootModel[List[ImageVersion]]):
    root: List[ImageVersion]


class ImportComponentResponse(BaseModel):
    clientToken: Optional[ClientToken] = None
    componentBuildVersionArn: Optional[ComponentBuildVersionArn] = None
    requestId: Optional[NonEmptyString] = None


class ImportVmImageResponse(BaseModel):
    clientToken: Optional[ClientToken] = None
    imageArn: Optional[Arn] = None
    requestId: Optional[NonEmptyString] = None


class InspectorScoreDetails(BaseModel):
    adjustedCvss: Optional[CvssScoreDetails] = None


class InstanceBlockDeviceMapping(BaseModel):
    deviceName: Optional[NonEmptyString] = None
    ebs: Optional[EbsInstanceBlockDeviceSpecification] = None
    noDevice: Optional[EmptyString] = None
    virtualName: Optional[NonEmptyString] = None


class InstanceBlockDeviceMappings(RootModel[List[InstanceBlockDeviceMapping]]):
    root: List[InstanceBlockDeviceMapping]


class InstanceConfiguration(BaseModel):
    blockDeviceMappings: Optional[InstanceBlockDeviceMappings] = None
    image: Optional[NonEmptyString] = None


class LaunchPermissionConfiguration(BaseModel):
    organizationArns: Optional[OrganizationArnList] = None
    organizationalUnitArns: Optional[OrganizationalUnitArnList] = None
    userGroups: Optional[StringList] = None
    userIds: Optional[AccountList] = None


class LaunchTemplateConfiguration(BaseModel):
    accountId: Optional[AccountId] = None
    launchTemplateId: LaunchTemplateId
    setDefaultVersion: Optional[Boolean] = None


class LaunchTemplateConfigurationList(RootModel[List[LaunchTemplateConfiguration]]):
    root: List[LaunchTemplateConfiguration] = Field(..., max_length=100, min_length=1)


class ListComponentBuildVersionsRequest(BaseModel):
    componentVersionArn: ComponentVersionArn
    maxResults: Optional[RestrictedInteger] = None
    nextToken: Optional[PaginationToken] = None


class ListComponentsRequest(BaseModel):
    byName: Optional[Boolean] = None
    filters: Optional[FilterList] = None
    maxResults: Optional[RestrictedInteger] = None
    nextToken: Optional[PaginationToken] = None
    owner: Optional[Ownership] = None


class ListComponentsResponse(BaseModel):
    componentVersionList: Optional[ComponentVersionList] = None
    nextToken: Optional[PaginationToken] = None
    requestId: Optional[NonEmptyString] = None


class ListContainerRecipesRequest(BaseModel):
    filters: Optional[FilterList] = None
    maxResults: Optional[RestrictedInteger] = None
    nextToken: Optional[NonEmptyString] = None
    owner: Optional[Ownership] = None


class ListDistributionConfigurationsRequest(BaseModel):
    filters: Optional[FilterList] = None
    maxResults: Optional[RestrictedInteger] = None
    nextToken: Optional[PaginationToken] = None


class ListImageBuildVersionsRequest(BaseModel):
    filters: Optional[FilterList] = None
    imageVersionArn: ImageVersionArn
    maxResults: Optional[RestrictedInteger] = None
    nextToken: Optional[PaginationToken] = None


class ListImagePackagesRequest(BaseModel):
    imageBuildVersionArn: ImageBuildVersionArn
    maxResults: Optional[RestrictedInteger] = None
    nextToken: Optional[PaginationToken] = None


class ListImagePackagesResponse(BaseModel):
    imagePackageList: Optional[ImagePackageList] = None
    nextToken: Optional[PaginationToken] = None
    requestId: Optional[NonEmptyString] = None


class ListImagePipelineImagesRequest(BaseModel):
    filters: Optional[FilterList] = None
    imagePipelineArn: ImagePipelineArn
    maxResults: Optional[RestrictedInteger] = None
    nextToken: Optional[PaginationToken] = None


class ListImagePipelinesRequest(BaseModel):
    filters: Optional[FilterList] = None
    maxResults: Optional[RestrictedInteger] = None
    nextToken: Optional[PaginationToken] = None


class ListImageRecipesRequest(BaseModel):
    filters: Optional[FilterList] = None
    maxResults: Optional[RestrictedInteger] = None
    nextToken: Optional[PaginationToken] = None
    owner: Optional[Ownership] = None


class ListImageScanFindingAggregationsRequest(BaseModel):
    filter: Optional[Filter] = None
    nextToken: Optional[PaginationToken] = None


class ListImageScanFindingAggregationsResponse(BaseModel):
    aggregationType: Optional[NonEmptyString] = None
    nextToken: Optional[PaginationToken] = None
    requestId: Optional[NonEmptyString] = None
    responses: Optional[ImageScanFindingAggregationsList] = None


class ListImageScanFindingsRequest(BaseModel):
    filters: Optional[ImageScanFindingsFilterList] = None
    maxResults: Optional[RestrictedInteger] = None
    nextToken: Optional[PaginationToken] = None


class ListImagesRequest(BaseModel):
    byName: Optional[Boolean] = None
    filters: Optional[FilterList] = None
    includeDeprecated: Optional[NullableBoolean] = None
    maxResults: Optional[RestrictedInteger] = None
    nextToken: Optional[PaginationToken] = None
    owner: Optional[Ownership] = None


class ListImagesResponse(BaseModel):
    imageVersionList: Optional[ImageVersionList] = None
    nextToken: Optional[PaginationToken] = None
    requestId: Optional[NonEmptyString] = None


class ListInfrastructureConfigurationsRequest(BaseModel):
    filters: Optional[FilterList] = None
    maxResults: Optional[RestrictedInteger] = None
    nextToken: Optional[PaginationToken] = None


class ListWorkflowExecutionsRequest(BaseModel):
    imageBuildVersionArn: ImageBuildVersionArn
    maxResults: Optional[RestrictedInteger] = None
    nextToken: Optional[PaginationToken] = None


class ListWorkflowStepExecutionsRequest(BaseModel):
    maxResults: Optional[RestrictedInteger] = None
    nextToken: Optional[PaginationToken] = None
    workflowExecutionId: WorkflowExecutionId


class PackageVulnerabilityDetails(BaseModel):
    cvss: Optional[CvssScoreList] = None
    referenceUrls: Optional[NonEmptyStringList] = None
    relatedVulnerabilities: Optional[VulnerabilityIdList] = None
    source: Optional[NonEmptyString] = None
    sourceUrl: Optional[NonEmptyString] = None
    vendorCreatedAt: Optional[DateTimeTimestamp] = None
    vendorSeverity: Optional[NonEmptyString] = None
    vendorUpdatedAt: Optional[DateTimeTimestamp] = None
    vulnerabilityId: VulnerabilityId
    vulnerablePackages: Optional[VulnerablePackageList] = None


class PutComponentPolicyRequest(BaseModel):
    componentArn: ComponentBuildVersionArn
    policy: ResourcePolicyDocument


class PutContainerRecipePolicyRequest(BaseModel):
    containerRecipeArn: ContainerRecipeArn
    policy: ResourcePolicyDocument


class PutImagePolicyRequest(BaseModel):
    imageArn: ImageBuildVersionArn
    policy: ResourcePolicyDocument


class PutImageRecipePolicyRequest(BaseModel):
    imageRecipeArn: ImageRecipeArn
    policy: ResourcePolicyDocument


class Remediation(BaseModel):
    recommendation: Optional[RemediationRecommendation] = None


class ResourceTagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    tags: TagMap


class UpdateImagePipelineRequest(BaseModel):
    clientToken: ClientToken
    containerRecipeArn: Optional[ContainerRecipeArn] = None
    description: Optional[NonEmptyString] = None
    distributionConfigurationArn: Optional[DistributionConfigurationArn] = None
    enhancedImageMetadataEnabled: Optional[NullableBoolean] = None
    imagePipelineArn: ImagePipelineArn
    imageRecipeArn: Optional[ImageRecipeArn] = None
    imageScanningConfiguration: Optional[ImageScanningConfiguration] = None
    imageTestsConfiguration: Optional[ImageTestsConfiguration] = None
    infrastructureConfigurationArn: InfrastructureConfigurationArn
    schedule: Optional[Schedule] = None
    status: Optional[PipelineStatus] = None


class UpdateInfrastructureConfigurationRequest(BaseModel):
    clientToken: ClientToken
    description: Optional[NonEmptyString] = None
    infrastructureConfigurationArn: InfrastructureConfigurationArn
    instanceMetadataOptions: Optional[InstanceMetadataOptions] = None
    instanceProfileName: InstanceProfileNameType
    instanceTypes: Optional[InstanceTypeList] = None
    keyPair: Optional[NonEmptyString] = None
    logging: Optional[Logging] = None
    resourceTags: Optional[ResourceTagMap] = None
    securityGroupIds: Optional[SecurityGroupIds] = None
    snsTopicArn: Optional[SnsTopicArn] = None
    subnetId: Optional[NonEmptyString] = None
    terminateInstanceOnFailure: Optional[NullableBoolean] = None


class WorkflowExecutionMetadata(BaseModel):
    endTime: Optional[DateTime] = None
    message: Optional[WorkflowExecutionMessage] = None
    startTime: Optional[DateTime] = None
    status: Optional[WorkflowExecutionStatus] = None
    totalStepCount: Optional[WorkflowStepCount] = None
    totalStepsFailed: Optional[WorkflowStepCount] = None
    totalStepsSkipped: Optional[WorkflowStepCount] = None
    totalStepsSucceeded: Optional[WorkflowStepCount] = None
    type: Optional[WorkflowType] = None
    workflowBuildVersionArn: Optional[WorkflowBuildVersionArn] = None
    workflowExecutionId: Optional[WorkflowExecutionId] = None


class WorkflowExecutionsList(RootModel[List[WorkflowExecutionMetadata]]):
    root: List[WorkflowExecutionMetadata]


class WorkflowStepMetadata(BaseModel):
    action: Optional[WorkflowStepAction] = None
    description: Optional[WorkflowStepDescription] = None
    endTime: Optional[DateTime] = None
    inputs: Optional[WorkflowStepInputs] = None
    message: Optional[WorkflowStepMessage] = None
    name: Optional[WorkflowStepName] = None
    outputs: Optional[WorkflowStepOutputs] = None
    rollbackStatus: Optional[WorkflowStepExecutionRollbackStatus] = None
    startTime: Optional[DateTime] = None
    status: Optional[WorkflowStepExecutionStatus] = None
    stepExecutionId: Optional[WorkflowStepExecutionId] = None


class CreateImagePutRequest(BaseModel):
    clientToken: constr(min_length=1, max_length=36) = Field(
        ..., description='The idempotency token used to make this request idempotent.'
    )
    containerRecipeArn: Optional[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.',
    )
    distributionConfigurationArn: Optional[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$'
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the distribution configuration that defines and configures the outputs of your pipeline.',
    )
    enhancedImageMetadataEnabled: Optional[bool] = Field(
        None,
        description='Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.',
    )
    imageRecipeArn: Optional[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.',
    )
    imageScanningConfiguration: Optional[ImageScanningConfiguration] = Field(
        None,
        description='Contains settings for Image Builder image resource and container image scans.',
    )
    imageTestsConfiguration: Optional[ImageTestsConfiguration] = Field(
        None,
        description='Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it.',
    )
    infrastructureConfigurationArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the infrastructure configuration that defines the environment in which your image will be built and tested.',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags of the image.'
    )


class CreateImagePipelinePutRequest(BaseModel):
    clientToken: constr(min_length=1, max_length=36) = Field(
        ..., description='The idempotency token used to make this request idempotent.'
    )
    containerRecipeArn: Optional[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the container recipe that is used to configure images created by this container pipeline.',
    )
    description: Optional[constr(min_length=1, max_length=1024)] = Field(
        None, description='The description of the image pipeline.'
    )
    distributionConfigurationArn: Optional[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$'
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the distribution configuration that will be used to configure and distribute images created by this image pipeline.',
    )
    enhancedImageMetadataEnabled: Optional[bool] = Field(
        None,
        description='Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.',
    )
    imageRecipeArn: Optional[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the image recipe that will be used to configure images created by this image pipeline.',
    )
    imageScanningConfiguration: Optional[ImageScanningConfiguration] = Field(
        None,
        description='Contains settings for Image Builder image resource and container image scans.',
    )
    imageTestsConfiguration: Optional[ImageTestsConfiguration] = Field(
        None,
        description='Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it.',
    )
    infrastructureConfigurationArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the infrastructure configuration that will be used to build images created by this image pipeline.',
    )
    name: constr(pattern=r'^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$') = (
        Field(..., description='The name of the image pipeline.')
    )
    schedule: Optional[Schedule] = Field(
        None,
        description='A schedule configures how often and when a pipeline will automatically create a new image.',
    )
    status: Optional[Status] = Field(
        None, description='The status of the image pipeline.'
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags of the image pipeline.'
    )


class ListComponentsPostRequest(BaseModel):
    byName: Optional[bool] = Field(
        None, description='Returns the list of components for the specified name.'
    )
    filters: Optional[List[Filter]] = Field(
        None,
        description='<p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>description</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>platform</code> </p> </li> <li> <p> <code>supportedOsVersion</code> </p> </li> <li> <p> <code>type</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>',
        max_length=10,
        min_length=1,
    )
    maxResults: Optional[conint(ge=1, le=25)] = Field(
        None, description='The maximum items to return in a request.'
    )
    nextToken: Optional[constr(min_length=1, max_length=65535)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )
    owner: Optional[Owner] = Field(
        None,
        description='Filters results based on the type of owner for the component. By default, this request returns a list of components that your account owns. To see results for other types of owners, you can specify components that Amazon manages, third party components, or components that other accounts have shared with you.',
    )


class ListContainerRecipesPostRequest(BaseModel):
    filters: Optional[List[Filter]] = Field(
        None,
        description='<p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>containerType</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>parentImage</code> </p> </li> <li> <p> <code>platform</code> </p> </li> </ul>',
        max_length=10,
        min_length=1,
    )
    maxResults: Optional[conint(ge=1, le=25)] = Field(
        None, description='The maximum items to return in a request.'
    )
    nextToken: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )
    owner: Optional[Owner] = Field(
        None,
        description='Returns container recipes belonging to the specified owner, that have been shared with you. You can omit this field to return container recipes belonging to your account.',
    )


class ListDistributionConfigurationsPostRequest(BaseModel):
    filters: Optional[List[Filter]] = Field(
        None,
        description='You can filter on <code>name</code> to streamline results.',
        max_length=10,
        min_length=1,
    )
    maxResults: Optional[conint(ge=1, le=25)] = Field(
        None, description='The maximum items to return in a request.'
    )
    nextToken: Optional[constr(min_length=1, max_length=65535)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )


class ListImageBuildVersionsPostRequest(BaseModel):
    filters: Optional[List[Filter]] = Field(
        None,
        description='<p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>osVersion</code> </p> </li> <li> <p> <code>platform</code> </p> </li> <li> <p> <code>type</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>',
        max_length=10,
        min_length=1,
    )
    imageVersionArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the image whose build versions you want to retrieve.',
    )
    maxResults: Optional[conint(ge=1, le=25)] = Field(
        None, description='The maximum items to return in a request.'
    )
    nextToken: Optional[constr(min_length=1, max_length=65535)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )


class ListImagePipelineImagesPostRequest(BaseModel):
    filters: Optional[List[Filter]] = Field(
        None,
        description='<p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>',
        max_length=10,
        min_length=1,
    )
    imagePipelineArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the image pipeline whose images you want to view.',
    )
    maxResults: Optional[conint(ge=1, le=25)] = Field(
        None, description='The maximum items to return in a request.'
    )
    nextToken: Optional[constr(min_length=1, max_length=65535)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )


class ListImagePipelinesPostRequest(BaseModel):
    filters: Optional[List[Filter]] = Field(
        None,
        description='<p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>description</code> </p> </li> <li> <p> <code>distributionConfigurationArn</code> </p> </li> <li> <p> <code>imageRecipeArn</code> </p> </li> <li> <p> <code>infrastructureConfigurationArn</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>status</code> </p> </li> </ul>',
        max_length=10,
        min_length=1,
    )
    maxResults: Optional[conint(ge=1, le=25)] = Field(
        None, description='The maximum items to return in a request.'
    )
    nextToken: Optional[constr(min_length=1, max_length=65535)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )


class ListImageRecipesPostRequest(BaseModel):
    filters: Optional[List[Filter]] = Field(
        None,
        description='<p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>parentImage</code> </p> </li> <li> <p> <code>platform</code> </p> </li> </ul>',
        max_length=10,
        min_length=1,
    )
    maxResults: Optional[conint(ge=1, le=25)] = Field(
        None, description='The maximum items to return in a request.'
    )
    nextToken: Optional[constr(min_length=1, max_length=65535)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )
    owner: Optional[Owner] = Field(
        None,
        description='The owner defines which image recipes you want to list. By default, this request will only show image recipes owned by your account. You can use this field to specify if you want to view image recipes owned by yourself, by Amazon, or those image recipes that have been shared with you by other customers.',
    )


class ListImageScanFindingsPostRequest(BaseModel):
    filters: Optional[List[ImageScanFindingsFilter]] = Field(
        None,
        description="<p>An array of name value pairs that you can use to filter your results. You can use the following filters to streamline results:</p> <ul> <li> <p> <code>imageBuildVersionArn</code> </p> </li> <li> <p> <code>imagePipelineArn</code> </p> </li> <li> <p> <code>vulnerabilityId</code> </p> </li> <li> <p> <code>severity</code> </p> </li> </ul> <p>If you don't request a filter, then all findings in your account are listed.</p>",
        max_length=1,
        min_length=1,
    )
    maxResults: Optional[conint(ge=1, le=25)] = Field(
        None, description='The maximum items to return in a request.'
    )
    nextToken: Optional[constr(min_length=1, max_length=65535)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )


class ListImagesPostRequest(BaseModel):
    byName: Optional[bool] = Field(
        None, description='Requests a list of images with a specific recipe name.'
    )
    filters: Optional[List[Filter]] = Field(
        None,
        description='<p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>osVersion</code> </p> </li> <li> <p> <code>platform</code> </p> </li> <li> <p> <code>type</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>',
        max_length=10,
        min_length=1,
    )
    includeDeprecated: Optional[bool] = Field(
        None, description='Includes deprecated images in the response list.'
    )
    maxResults: Optional[conint(ge=1, le=25)] = Field(
        None, description='The maximum items to return in a request.'
    )
    nextToken: Optional[constr(min_length=1, max_length=65535)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )
    owner: Optional[Owner] = Field(
        None,
        description='The owner defines which images you want to list. By default, this request will only show images owned by your account. You can use this field to specify if you want to view images owned by yourself, by Amazon, or those images that have been shared with you by other customers.',
    )


class ListInfrastructureConfigurationsPostRequest(BaseModel):
    filters: Optional[List[Filter]] = Field(
        None,
        description='You can filter on <code>name</code> to streamline results.',
        max_length=10,
        min_length=1,
    )
    maxResults: Optional[conint(ge=1, le=25)] = Field(
        None, description='The maximum items to return in a request.'
    )
    nextToken: Optional[constr(min_length=1, max_length=65535)] = Field(
        None,
        description='A token to specify where to start paginating. This is the NextToken from a previously truncated response.',
    )


class UpdateImagePipelinePutRequest(BaseModel):
    clientToken: constr(min_length=1, max_length=36) = Field(
        ..., description='The idempotency token used to make this request idempotent.'
    )
    containerRecipeArn: Optional[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the container pipeline to update.',
    )
    description: Optional[constr(min_length=1, max_length=1024)] = Field(
        None, description='The description of the image pipeline.'
    )
    distributionConfigurationArn: Optional[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$'
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the distribution configuration that Image Builder uses to configure and distribute images that this image pipeline has updated.',
    )
    enhancedImageMetadataEnabled: Optional[bool] = Field(
        None,
        description='Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.',
    )
    imagePipelineArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the image pipeline that you want to update.',
    )
    imageRecipeArn: Optional[
        constr(
            pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$'
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the image recipe that will be used to configure images updated by this image pipeline.',
    )
    imageScanningConfiguration: Optional[ImageScanningConfiguration] = Field(
        None,
        description='Contains settings for Image Builder image resource and container image scans.',
    )
    imageTestsConfiguration: Optional[ImageTestsConfiguration] = Field(
        None,
        description='Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it.',
    )
    infrastructureConfigurationArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the infrastructure configuration that Image Builder uses to build images that this image pipeline has updated.',
    )
    schedule: Optional[Schedule] = Field(
        None,
        description='A schedule configures how often and when a pipeline will automatically create a new image.',
    )
    status: Optional[Status] = Field(
        None, description='The status of the image pipeline.'
    )


class Ami(BaseModel):
    accountId: Optional[NonEmptyString] = None
    description: Optional[NonEmptyString] = None
    image: Optional[NonEmptyString] = None
    name: Optional[NonEmptyString] = None
    region: Optional[NonEmptyString] = None
    state: Optional[ImageState] = None


class AmiDistributionConfiguration(BaseModel):
    amiTags: Optional[TagMap] = None
    description: Optional[NonEmptyString] = None
    kmsKeyId: Optional[NonEmptyString] = None
    launchPermission: Optional[LaunchPermissionConfiguration] = None
    name: Optional[AmiNameString] = None
    targetAccountIds: Optional[AccountList] = None


class AmiList(RootModel[List[Ami]]):
    root: List[Ami]


class Component(BaseModel):
    arn: Optional[ImageBuilderArn] = None
    changeDescription: Optional[NonEmptyString] = None
    data: Optional[ComponentData] = None
    dateCreated: Optional[DateTime] = None
    description: Optional[NonEmptyString] = None
    encrypted: Optional[NullableBoolean] = None
    kmsKeyId: Optional[NonEmptyString] = None
    name: Optional[ResourceName] = None
    obfuscate: Optional[Boolean] = None
    owner: Optional[NonEmptyString] = None
    parameters: Optional[ComponentParameterDetailList] = None
    platform: Optional[Platform] = None
    publisher: Optional[NonEmptyString] = None
    state: Optional[ComponentState] = None
    supportedOsVersions: Optional[OsVersionList] = None
    tags: Optional[TagMap] = None
    type: Optional[ComponentType] = None
    version: Optional[VersionNumber] = None


class ComponentConfiguration(BaseModel):
    componentArn: ComponentVersionArnOrBuildVersionArn
    parameters: Optional[ComponentParameterList] = None


class ComponentConfigurationList(RootModel[List[ComponentConfiguration]]):
    root: List[ComponentConfiguration] = Field(..., min_length=1)


class ComponentSummary(BaseModel):
    arn: Optional[ImageBuilderArn] = None
    changeDescription: Optional[NonEmptyString] = None
    dateCreated: Optional[DateTime] = None
    description: Optional[NonEmptyString] = None
    name: Optional[ResourceName] = None
    obfuscate: Optional[Boolean] = None
    owner: Optional[NonEmptyString] = None
    platform: Optional[Platform] = None
    publisher: Optional[NonEmptyString] = None
    state: Optional[ComponentState] = None
    supportedOsVersions: Optional[OsVersionList] = None
    tags: Optional[TagMap] = None
    type: Optional[ComponentType] = None
    version: Optional[VersionNumber] = None


class ComponentSummaryList(RootModel[List[ComponentSummary]]):
    root: List[ComponentSummary]


class ContainerRecipe(BaseModel):
    arn: Optional[ImageBuilderArn] = None
    components: Optional[ComponentConfigurationList] = None
    containerType: Optional[ContainerType] = None
    dateCreated: Optional[DateTime] = None
    description: Optional[NonEmptyString] = None
    dockerfileTemplateData: Optional[DockerFileTemplate] = None
    encrypted: Optional[NullableBoolean] = None
    instanceConfiguration: Optional[InstanceConfiguration] = None
    kmsKeyId: Optional[NonEmptyString] = None
    name: Optional[ResourceName] = None
    owner: Optional[NonEmptyString] = None
    parentImage: Optional[NonEmptyString] = None
    platform: Optional[Platform] = None
    tags: Optional[TagMap] = None
    targetRepository: Optional[TargetContainerRepository] = None
    version: Optional[VersionNumber] = None
    workingDirectory: Optional[NonEmptyString] = None


class ContainerRecipeSummary(BaseModel):
    arn: Optional[ImageBuilderArn] = None
    containerType: Optional[ContainerType] = None
    dateCreated: Optional[DateTime] = None
    name: Optional[ResourceName] = None
    owner: Optional[NonEmptyString] = None
    parentImage: Optional[NonEmptyString] = None
    platform: Optional[Platform] = None
    tags: Optional[TagMap] = None


class ContainerRecipeSummaryList(RootModel[List[ContainerRecipeSummary]]):
    root: List[ContainerRecipeSummary]


class CreateComponentRequest(BaseModel):
    changeDescription: Optional[NonEmptyString] = None
    clientToken: ClientToken
    data: Optional[InlineComponentData] = None
    description: Optional[NonEmptyString] = None
    kmsKeyId: Optional[NonEmptyString] = None
    name: ResourceName
    platform: Platform
    semanticVersion: VersionNumber
    supportedOsVersions: Optional[OsVersionList] = None
    tags: Optional[TagMap] = None
    uri: Optional[Uri] = None


class CreateContainerRecipeRequest(BaseModel):
    clientToken: ClientToken
    components: ComponentConfigurationList
    containerType: ContainerType
    description: Optional[NonEmptyString] = None
    dockerfileTemplateData: Optional[InlineDockerFileTemplate] = None
    dockerfileTemplateUri: Optional[Uri] = None
    imageOsVersionOverride: Optional[NonEmptyString] = None
    instanceConfiguration: Optional[InstanceConfiguration] = None
    kmsKeyId: Optional[NonEmptyString] = None
    name: ResourceName
    parentImage: NonEmptyString
    platformOverride: Optional[Platform] = None
    semanticVersion: VersionNumber
    tags: Optional[TagMap] = None
    targetRepository: TargetContainerRepository
    workingDirectory: Optional[NonEmptyString] = None


class CreateImagePipelineRequest(BaseModel):
    clientToken: ClientToken
    containerRecipeArn: Optional[ContainerRecipeArn] = None
    description: Optional[NonEmptyString] = None
    distributionConfigurationArn: Optional[DistributionConfigurationArn] = None
    enhancedImageMetadataEnabled: Optional[NullableBoolean] = None
    imageRecipeArn: Optional[ImageRecipeArn] = None
    imageScanningConfiguration: Optional[ImageScanningConfiguration] = None
    imageTestsConfiguration: Optional[ImageTestsConfiguration] = None
    infrastructureConfigurationArn: InfrastructureConfigurationArn
    name: ResourceName
    schedule: Optional[Schedule] = None
    status: Optional[PipelineStatus] = None
    tags: Optional[TagMap] = None


class CreateImageRecipeRequest(BaseModel):
    additionalInstanceConfiguration: Optional[AdditionalInstanceConfiguration] = None
    blockDeviceMappings: Optional[InstanceBlockDeviceMappings] = None
    clientToken: ClientToken
    components: ComponentConfigurationList
    description: Optional[NonEmptyString] = None
    name: ResourceName
    parentImage: NonEmptyString
    semanticVersion: VersionNumber
    tags: Optional[TagMap] = None
    workingDirectory: Optional[NonEmptyString] = None


class CreateImageRequest(BaseModel):
    clientToken: ClientToken
    containerRecipeArn: Optional[ContainerRecipeArn] = None
    distributionConfigurationArn: Optional[DistributionConfigurationArn] = None
    enhancedImageMetadataEnabled: Optional[NullableBoolean] = None
    imageRecipeArn: Optional[ImageRecipeArn] = None
    imageScanningConfiguration: Optional[ImageScanningConfiguration] = None
    imageTestsConfiguration: Optional[ImageTestsConfiguration] = None
    infrastructureConfigurationArn: InfrastructureConfigurationArn
    tags: Optional[TagMap] = None


class CreateInfrastructureConfigurationRequest(BaseModel):
    clientToken: ClientToken
    description: Optional[NonEmptyString] = None
    instanceMetadataOptions: Optional[InstanceMetadataOptions] = None
    instanceProfileName: InstanceProfileNameType
    instanceTypes: Optional[InstanceTypeList] = None
    keyPair: Optional[NonEmptyString] = None
    logging: Optional[Logging] = None
    name: ResourceName
    resourceTags: Optional[ResourceTagMap] = None
    securityGroupIds: Optional[SecurityGroupIds] = None
    snsTopicArn: Optional[SnsTopicArn] = None
    subnetId: Optional[NonEmptyString] = None
    tags: Optional[TagMap] = None
    terminateInstanceOnFailure: Optional[NullableBoolean] = None


class DistributionConfigurationSummary(BaseModel):
    arn: Optional[ImageBuilderArn] = None
    dateCreated: Optional[DateTime] = None
    dateUpdated: Optional[DateTime] = None
    description: Optional[NonEmptyString] = None
    name: Optional[ResourceName] = None
    regions: Optional[RegionList] = None
    tags: Optional[TagMap] = None


class DistributionConfigurationSummaryList(
    RootModel[List[DistributionConfigurationSummary]]
):
    root: List[DistributionConfigurationSummary]


class FastLaunchConfiguration(BaseModel):
    accountId: Optional[AccountId] = None
    enabled: Boolean
    launchTemplate: Optional[FastLaunchLaunchTemplateSpecification] = None
    maxParallelLaunches: Optional[MaxParallelLaunches] = None
    snapshotConfiguration: Optional[FastLaunchSnapshotConfiguration] = None


class FastLaunchConfigurationList(RootModel[List[FastLaunchConfiguration]]):
    root: List[FastLaunchConfiguration] = Field(..., max_length=1000, min_length=1)


class GetComponentResponse(BaseModel):
    component: Optional[Component] = None
    requestId: Optional[NonEmptyString] = None


class GetContainerRecipeResponse(BaseModel):
    containerRecipe: Optional[ContainerRecipe] = None
    requestId: Optional[NonEmptyString] = None


class ImagePipeline(BaseModel):
    arn: Optional[ImageBuilderArn] = None
    containerRecipeArn: Optional[Arn] = None
    dateCreated: Optional[DateTime] = None
    dateLastRun: Optional[DateTime] = None
    dateNextRun: Optional[DateTime] = None
    dateUpdated: Optional[DateTime] = None
    description: Optional[NonEmptyString] = None
    distributionConfigurationArn: Optional[Arn] = None
    enhancedImageMetadataEnabled: Optional[NullableBoolean] = None
    imageRecipeArn: Optional[Arn] = None
    imageScanningConfiguration: Optional[ImageScanningConfiguration] = None
    imageTestsConfiguration: Optional[ImageTestsConfiguration] = None
    infrastructureConfigurationArn: Optional[Arn] = None
    name: Optional[ResourceName] = None
    platform: Optional[Platform] = None
    schedule: Optional[Schedule] = None
    status: Optional[PipelineStatus] = None
    tags: Optional[TagMap] = None


class ImagePipelineList(RootModel[List[ImagePipeline]]):
    root: List[ImagePipeline]


class ImageRecipe(BaseModel):
    additionalInstanceConfiguration: Optional[AdditionalInstanceConfiguration] = None
    arn: Optional[ImageBuilderArn] = None
    blockDeviceMappings: Optional[InstanceBlockDeviceMappings] = None
    components: Optional[ComponentConfigurationList] = None
    dateCreated: Optional[DateTime] = None
    description: Optional[NonEmptyString] = None
    name: Optional[ResourceName] = None
    owner: Optional[NonEmptyString] = None
    parentImage: Optional[NonEmptyString] = None
    platform: Optional[Platform] = None
    tags: Optional[TagMap] = None
    type: Optional[ImageType] = None
    version: Optional[VersionNumber] = None
    workingDirectory: Optional[NonEmptyString] = None


class ImageRecipeSummary(BaseModel):
    arn: Optional[ImageBuilderArn] = None
    dateCreated: Optional[DateTime] = None
    name: Optional[ResourceName] = None
    owner: Optional[NonEmptyString] = None
    parentImage: Optional[NonEmptyString] = None
    platform: Optional[Platform] = None
    tags: Optional[TagMap] = None


class ImageRecipeSummaryList(RootModel[List[ImageRecipeSummary]]):
    root: List[ImageRecipeSummary]


class ImageScanFinding(BaseModel):
    awsAccountId: Optional[NonEmptyString] = None
    description: Optional[NonEmptyString] = None
    firstObservedAt: Optional[DateTimeTimestamp] = None
    fixAvailable: Optional[NonEmptyString] = None
    imageBuildVersionArn: Optional[ImageBuildVersionArn] = None
    imagePipelineArn: Optional[ImagePipelineArn] = None
    inspectorScore: Optional[NonNegativeDouble] = None
    inspectorScoreDetails: Optional[InspectorScoreDetails] = None
    packageVulnerabilityDetails: Optional[PackageVulnerabilityDetails] = None
    remediation: Optional[Remediation] = None
    severity: Optional[NonEmptyString] = None
    title: Optional[NonEmptyString] = None
    type: Optional[NonEmptyString] = None
    updatedAt: Optional[DateTimeTimestamp] = None


class ImageScanFindingsList(RootModel[List[ImageScanFinding]]):
    root: List[ImageScanFinding] = Field(..., max_length=25)


class ImportComponentRequest(BaseModel):
    changeDescription: Optional[NonEmptyString] = None
    clientToken: ClientToken
    data: Optional[NonEmptyString] = None
    description: Optional[NonEmptyString] = None
    format: ComponentFormat
    kmsKeyId: Optional[NonEmptyString] = None
    name: ResourceName
    platform: Platform
    semanticVersion: VersionNumber
    tags: Optional[TagMap] = None
    type: ComponentType
    uri: Optional[Uri] = None


class ImportVmImageRequest(BaseModel):
    clientToken: ClientToken
    description: Optional[NonEmptyString] = None
    name: NonEmptyString
    osVersion: Optional[OsVersion] = None
    platform: Platform
    semanticVersion: VersionNumber
    tags: Optional[TagMap] = None
    vmImportTaskId: NonEmptyString


class InfrastructureConfiguration(BaseModel):
    arn: Optional[ImageBuilderArn] = None
    dateCreated: Optional[DateTime] = None
    dateUpdated: Optional[DateTime] = None
    description: Optional[NonEmptyString] = None
    instanceMetadataOptions: Optional[InstanceMetadataOptions] = None
    instanceProfileName: Optional[InstanceProfileNameType] = None
    instanceTypes: Optional[InstanceTypeList] = None
    keyPair: Optional[NonEmptyString] = None
    logging: Optional[Logging] = None
    name: Optional[ResourceName] = None
    resourceTags: Optional[ResourceTagMap] = None
    securityGroupIds: Optional[SecurityGroupIds] = None
    snsTopicArn: Optional[NonEmptyString] = None
    subnetId: Optional[NonEmptyString] = None
    tags: Optional[TagMap] = None
    terminateInstanceOnFailure: Optional[NullableBoolean] = None


class InfrastructureConfigurationSummary(BaseModel):
    arn: Optional[ImageBuilderArn] = None
    dateCreated: Optional[DateTime] = None
    dateUpdated: Optional[DateTime] = None
    description: Optional[NonEmptyString] = None
    instanceProfileName: Optional[InstanceProfileNameType] = None
    instanceTypes: Optional[InstanceTypeList] = None
    name: Optional[ResourceName] = None
    resourceTags: Optional[ResourceTagMap] = None
    tags: Optional[TagMap] = None


class InfrastructureConfigurationSummaryList(
    RootModel[List[InfrastructureConfigurationSummary]]
):
    root: List[InfrastructureConfigurationSummary]


class ListComponentBuildVersionsResponse(BaseModel):
    componentSummaryList: Optional[ComponentSummaryList] = None
    nextToken: Optional[PaginationToken] = None
    requestId: Optional[NonEmptyString] = None


class ListContainerRecipesResponse(BaseModel):
    containerRecipeSummaryList: Optional[ContainerRecipeSummaryList] = None
    nextToken: Optional[NonEmptyString] = None
    requestId: Optional[NonEmptyString] = None


class ListDistributionConfigurationsResponse(BaseModel):
    distributionConfigurationSummaryList: Optional[
        DistributionConfigurationSummaryList
    ] = None
    nextToken: Optional[PaginationToken] = None
    requestId: Optional[NonEmptyString] = None


class ListImagePipelinesResponse(BaseModel):
    imagePipelineList: Optional[ImagePipelineList] = None
    nextToken: Optional[PaginationToken] = None
    requestId: Optional[NonEmptyString] = None


class ListImageRecipesResponse(BaseModel):
    imageRecipeSummaryList: Optional[ImageRecipeSummaryList] = None
    nextToken: Optional[PaginationToken] = None
    requestId: Optional[NonEmptyString] = None


class ListImageScanFindingsResponse(BaseModel):
    findings: Optional[ImageScanFindingsList] = None
    nextToken: Optional[PaginationToken] = None
    requestId: Optional[NonEmptyString] = None


class ListInfrastructureConfigurationsResponse(BaseModel):
    infrastructureConfigurationSummaryList: Optional[
        InfrastructureConfigurationSummaryList
    ] = None
    nextToken: Optional[PaginationToken] = None
    requestId: Optional[NonEmptyString] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class ListWorkflowExecutionsResponse(BaseModel):
    imageBuildVersionArn: Optional[ImageBuildVersionArn] = None
    message: Optional[ImageBuildMessage] = None
    nextToken: Optional[PaginationToken] = None
    requestId: Optional[NonEmptyString] = None
    workflowExecutions: Optional[WorkflowExecutionsList] = None


class OutputResources(BaseModel):
    amis: Optional[AmiList] = None
    containers: Optional[ContainerList] = None


class WorkflowStepExecutionsList(RootModel[List[WorkflowStepMetadata]]):
    root: List[WorkflowStepMetadata]


class CreateContainerRecipePutRequest(BaseModel):
    clientToken: constr(min_length=1, max_length=36) = Field(
        ..., description='The client token used to make this request idempotent.'
    )
    components: List[ComponentConfiguration] = Field(
        ...,
        description='Components for build and test that are included in the container recipe. Recipes require a minimum of one build component, and can have a maximum of 20 build and test components in any combination.',
        min_length=1,
    )
    containerType: ContainerType = Field(
        ..., description='The type of container to create.'
    )
    description: Optional[constr(min_length=1, max_length=1024)] = Field(
        None, description='The description of the container recipe.'
    )
    dockerfileTemplateData: Optional[
        constr(pattern=r'[^\x00]+', min_length=1, max_length=16000)
    ] = Field(
        None,
        description='The Dockerfile template used to build your image as an inline data blob.',
    )
    dockerfileTemplateUri: Optional[str] = Field(
        None,
        description='The Amazon S3 URI for the Dockerfile that will be used to build your container image.',
    )
    imageOsVersionOverride: Optional[constr(min_length=1, max_length=1024)] = Field(
        None, description='Specifies the operating system version for the base image.'
    )
    instanceConfiguration: Optional[InstanceConfiguration] = Field(
        None,
        description='Defines a custom base AMI and block device mapping configurations of an instance used for building and testing container images.',
    )
    kmsKeyId: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='Identifies which KMS key is used to encrypt the container image.',
    )
    name: constr(pattern=r'^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$') = (
        Field(..., description='The name of the container recipe.')
    )
    parentImage: constr(min_length=1, max_length=1024) = Field(
        ..., description='The base image for the container recipe.'
    )
    platformOverride: Optional[PlatformOverride] = Field(
        None,
        description='Specifies the operating system platform when you use a custom base image.',
    )
    semanticVersion: constr(pattern=r'^[0-9]+\.[0-9]+\.[0-9]+$') = Field(
        ...,
        description='<p>The semantic version of the container recipe. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='Tags that are attached to the container recipe.'
    )
    targetRepository: TargetRepository = Field(
        ...,
        description='The container repository where the output container image is stored.',
    )
    workingDirectory: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description='The working directory for use during build and test workflows.',
    )


class CreateImageRecipePutRequest(BaseModel):
    additionalInstanceConfiguration: Optional[AdditionalInstanceConfiguration] = Field(
        None,
        description='<p>In addition to your infrastructure configuration, these settings provide an extra layer of control over your build instances. You can also specify commands to run on launch for all of your build instances.</p> <p>Image Builder does not automatically install the Systems Manager agent on Windows instances. If your base image includes the Systems Manager agent, then the AMI that you create will also include the agent. For Linux instances, if the base image does not already include the Systems Manager agent, Image Builder installs it. For Linux instances where Image Builder installs the Systems Manager agent, you can choose whether to keep it for the AMI that you create.</p>',
    )
    blockDeviceMappings: Optional[List[InstanceBlockDeviceMapping]] = Field(
        None, description='The block device mappings of the image recipe.'
    )
    clientToken: constr(min_length=1, max_length=36) = Field(
        ..., description='The idempotency token used to make this request idempotent.'
    )
    components: List[ComponentConfiguration] = Field(
        ..., description='The components included in the image recipe.', min_length=1
    )
    description: Optional[constr(min_length=1, max_length=1024)] = Field(
        None, description='The description of the image recipe.'
    )
    name: constr(pattern=r'^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$') = (
        Field(..., description='The name of the image recipe.')
    )
    parentImage: constr(min_length=1, max_length=1024) = Field(
        ...,
        description='The base image of the image recipe. The value of the string can be the ARN of the base image or an AMI ID. The format for the ARN follows this example: <code>arn:aws:imagebuilder:us-west-2:aws:image/windows-server-2016-english-full-base-x86/x.x.x</code>. You can provide the specific version that you want to use, or you can use a wildcard in all of the fields. If you enter an AMI ID for the string value, you must have access to the AMI, and the AMI must be in the same Region in which you are using Image Builder.',
    )
    semanticVersion: constr(pattern=r'^[0-9]+\.[0-9]+\.[0-9]+$') = Field(
        ...,
        description='<p>The semantic version of the image recipe. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags of the image recipe.'
    )
    workingDirectory: Optional[constr(min_length=1, max_length=1024)] = Field(
        None, description='The working directory used during build and test workflows.'
    )


class Distribution(BaseModel):
    amiDistributionConfiguration: Optional[AmiDistributionConfiguration] = None
    containerDistributionConfiguration: Optional[ContainerDistributionConfiguration] = (
        None
    )
    fastLaunchConfigurations: Optional[FastLaunchConfigurationList] = None
    launchTemplateConfigurations: Optional[LaunchTemplateConfigurationList] = None
    licenseConfigurationArns: Optional[LicenseConfigurationArnList] = None
    region: NonEmptyString
    s3ExportConfiguration: Optional[S3ExportConfiguration] = None


class DistributionList(RootModel[List[Distribution]]):
    root: List[Distribution]


class GetImagePipelineResponse(BaseModel):
    imagePipeline: Optional[ImagePipeline] = None
    requestId: Optional[NonEmptyString] = None


class GetImageRecipeResponse(BaseModel):
    imageRecipe: Optional[ImageRecipe] = None
    requestId: Optional[NonEmptyString] = None


class GetInfrastructureConfigurationResponse(BaseModel):
    infrastructureConfiguration: Optional[InfrastructureConfiguration] = None
    requestId: Optional[NonEmptyString] = None


class ImageSummary(BaseModel):
    arn: Optional[ImageBuilderArn] = None
    buildType: Optional[BuildType] = None
    dateCreated: Optional[DateTime] = None
    imageSource: Optional[ImageSource] = None
    name: Optional[ResourceName] = None
    osVersion: Optional[OsVersion] = None
    outputResources: Optional[OutputResources] = None
    owner: Optional[NonEmptyString] = None
    platform: Optional[Platform] = None
    state: Optional[ImageState] = None
    tags: Optional[TagMap] = None
    type: Optional[ImageType] = None
    version: Optional[VersionNumber] = None


class ImageSummaryList(RootModel[List[ImageSummary]]):
    root: List[ImageSummary]


class ListImageBuildVersionsResponse(BaseModel):
    imageSummaryList: Optional[ImageSummaryList] = None
    nextToken: Optional[PaginationToken] = None
    requestId: Optional[NonEmptyString] = None


class ListImagePipelineImagesResponse(BaseModel):
    imageSummaryList: Optional[ImageSummaryList] = None
    nextToken: Optional[PaginationToken] = None
    requestId: Optional[NonEmptyString] = None


class ListWorkflowStepExecutionsResponse(BaseModel):
    imageBuildVersionArn: Optional[ImageBuildVersionArn] = None
    message: Optional[ImageBuildMessage] = None
    nextToken: Optional[PaginationToken] = None
    requestId: Optional[NonEmptyString] = None
    steps: Optional[WorkflowStepExecutionsList] = None
    workflowBuildVersionArn: Optional[WorkflowBuildVersionArn] = None
    workflowExecutionId: Optional[WorkflowExecutionId] = None


class UpdateDistributionConfigurationRequest(BaseModel):
    clientToken: ClientToken
    description: Optional[NonEmptyString] = None
    distributionConfigurationArn: DistributionConfigurationArn
    distributions: DistributionList


class CreateDistributionConfigurationPutRequest(BaseModel):
    clientToken: constr(min_length=1, max_length=36) = Field(
        ..., description='The idempotency token of the distribution configuration.'
    )
    description: Optional[constr(min_length=1, max_length=1024)] = Field(
        None, description='The description of the distribution configuration.'
    )
    distributions: List[Distribution] = Field(
        ..., description='The distributions of the distribution configuration.'
    )
    name: constr(pattern=r'^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$') = (
        Field(..., description='The name of the distribution configuration.')
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags of the distribution configuration.'
    )


class UpdateDistributionConfigurationPutRequest(BaseModel):
    clientToken: constr(min_length=1, max_length=36) = Field(
        ..., description='The idempotency token of the distribution configuration.'
    )
    description: Optional[constr(min_length=1, max_length=1024)] = Field(
        None, description='The description of the distribution configuration.'
    )
    distributionConfigurationArn: constr(
        pattern=r'^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the distribution configuration that you want to update.',
    )
    distributions: List[Distribution] = Field(
        ..., description='The distributions of the distribution configuration.'
    )


class CreateDistributionConfigurationRequest(BaseModel):
    clientToken: ClientToken
    description: Optional[NonEmptyString] = None
    distributions: DistributionList
    name: ResourceName
    tags: Optional[TagMap] = None


class DistributionConfiguration(BaseModel):
    arn: Optional[ImageBuilderArn] = None
    dateCreated: Optional[DateTime] = None
    dateUpdated: Optional[DateTime] = None
    description: Optional[NonEmptyString] = None
    distributions: Optional[DistributionList] = None
    name: Optional[ResourceName] = None
    tags: Optional[TagMap] = None
    timeoutMinutes: DistributionTimeoutMinutes


class GetDistributionConfigurationResponse(BaseModel):
    distributionConfiguration: Optional[DistributionConfiguration] = None
    requestId: Optional[NonEmptyString] = None


class Image(BaseModel):
    arn: Optional[ImageBuilderArn] = None
    buildType: Optional[BuildType] = None
    containerRecipe: Optional[ContainerRecipe] = None
    dateCreated: Optional[DateTime] = None
    distributionConfiguration: Optional[DistributionConfiguration] = None
    enhancedImageMetadataEnabled: Optional[NullableBoolean] = None
    imageRecipe: Optional[ImageRecipe] = None
    imageScanningConfiguration: Optional[ImageScanningConfiguration] = None
    imageSource: Optional[ImageSource] = None
    imageTestsConfiguration: Optional[ImageTestsConfiguration] = None
    infrastructureConfiguration: Optional[InfrastructureConfiguration] = None
    name: Optional[ResourceName] = None
    osVersion: Optional[OsVersion] = None
    outputResources: Optional[OutputResources] = None
    platform: Optional[Platform] = None
    scanState: Optional[ImageScanState] = None
    sourcePipelineArn: Optional[Arn] = None
    sourcePipelineName: Optional[ResourceName] = None
    state: Optional[ImageState] = None
    tags: Optional[TagMap] = None
    type: Optional[ImageType] = None
    version: Optional[VersionNumber] = None


class GetImageResponse(BaseModel):
    image: Optional[Image] = None
    requestId: Optional[NonEmptyString] = None
